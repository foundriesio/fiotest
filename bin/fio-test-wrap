#!/usr/bin/python3
import os
from tempfile import mkdtemp
from typing import List
from shutil import rmtree
import subprocess
import sys

from fiotest.api import API, status
from fiotest.environment import debug_mode, dry_run

here = os.path.dirname(os.path.abspath(__file__))


def run(artifacts_dir: str, test_dir: str, test_cmd: List[str]) -> str:
    i = 0
    max_lines = 20
    last_lines: List[bytes] = [b""] * max_lines
    env = os.environ.copy()
    env["PATH"] = here + ":" + os.environ["PATH"]
    env["TEST_DIR"] = test_dir
    env["ARTIFACTS_DIR"] = artifacts_dir
    try:
        consolefd = open(os.path.join(artifacts_dir, "console.log"), "wb")
        p = subprocess.Popen(
            test_cmd, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, env=env
        )
        assert p.stdout  # for mypy
        for line in p.stdout:
            sys.stdout.buffer.write(b"| ")
            sys.stdout.buffer.write(line)
            sys.stdout.buffer.flush()
            consolefd.write(line)
            last_lines[i % max_lines] = line
            i += 1
        p.wait()
        consolefd.close()
        if p.returncode != 0:
            raise subprocess.CalledProcessError(p.returncode, test_cmd)
    except Exception as e:
        buf = b"".join(x for x in last_lines[i % max_lines :] if x)
        buf += b"".join(x for x in last_lines[: i % max_lines])
        return "%r\nLast %d lines of test:\n%s" % (e, max_lines, buf.decode())
    return ""


def collect_results(results_dir: str) -> List[dict]:
    results: List[dict] = []

    tests = os.listdir(results_dir)
    tests.sort(key=lambda x: float(x.split("-")[0]))  # sort by test time
    for res in tests:
        ts, name = res.split("-", 1)
        result = {
            "name": name,
            "status": "PASSED",
            "local_ts": float(ts),
        }
        results.append(result)
        failed = os.path.exists(os.path.join(results_dir, res, "failed"))
        if failed:
            result["status"] = "FAILED"
            try:
                with open(os.path.join(results_dir, res, "log")) as f:
                    result["details"] = f.read()
            except FileNotFoundError:
                pass

        metrics = os.path.join(results_dir, res, "metrics")
        if os.path.isdir(metrics):
            result["metrics"] = {}
            for m in os.listdir(metrics):
                with open(os.path.join(metrics, m)) as f:
                    val = float(f.read().strip())
                    result["metrics"][m] = val
        skipped = os.path.exists(os.path.join(results_dir, res, "skipped"))
        if skipped:
            result["status"] = "SKIPPED"
    return results


def main(sota_dir: str, test: str, test_cmd: List[str], dryrun: bool):
    api = API(sota_dir, dryrun)
    test_id = api.start_test(test)
    status("Starting test: " + test_id + " -> " + " ".join(test_cmd))

    fiotest_dir = os.environ.get("FIO_TEST_DIR", "/var/lib/fiotest")
    if not os.path.isdir(fiotest_dir):
        status(
            "WARNING: %s does not exist. docker-compose.yml is likely missing bind mount"
            % fiotest_dir
        )
        os.mkdir(fiotest_dir)

    tmpdir = mkdtemp(prefix="fio-test", dir=fiotest_dir)
    os.chmod(tmpdir, 0o777)
    artifacts_dir = os.path.join(tmpdir, "artifacts")
    results_dir = os.path.join(tmpdir, "results")
    for x in (artifacts_dir, results_dir):
        os.mkdir(x)
        os.chmod(x, 0o777)

    data = {}
    failure = run(artifacts_dir, results_dir, test_cmd)
    if failure:
        data = {"status": "FAILED", "details": failure}

    data["results"] = collect_results(results_dir)
    try:
        api.complete_test(test_id, data, artifacts_dir)
    finally:
        if not debug_mode():
            rmtree(tmpdir)


if __name__ == "__main__":
    if len(sys.argv) < 3:
        sys.exit("Usage: %s <test-name> <test command>..." % sys.argv[0])
    sota_dir = os.environ.get("SOTA_DIR", "/var/sota")
    main(sota_dir, sys.argv[1], sys.argv[2:], dry_run())
